// ============================================================================
// BOOTSTRAP (Compose Root)
// ============================================================================
//
// üì¶ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
// –≠—Ç–æ—Ç —Ñ–∞–π–ª ‚Äî "—Ç–æ—á–∫–∞ —Å–±–æ—Ä–∫–∏" –≤—Å–µ–≥–æ Ride Service. –ó–¥–µ—Å—å –º—ã:
// 1. –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ë–î, RabbitMQ, WebSocket)
// 2. –°–æ–±–∏—Ä–∞–µ–º Use Cases —Å –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
// 3. –°–≤—è–∑—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã —Å Use Cases
// 4. –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –∏ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
//
// üí° –ü–†–ò–ù–¶–ò–ü: Dependency Injection Container
// –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã.
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–º–µ–Ω–∏—Ç—å PostgreSQL
// –Ω–∞ In-Memory —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤).
//
// üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
//
//   –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Üí –ê–¥–∞–ø—Ç–µ—Ä—ã ‚Üí Use Cases ‚Üí Domain
//   (PostgreSQL)     (Repository)  (Business Logic)  (Entities)
//        ‚Üì               ‚Üì              ‚Üì               ‚Üì
//   NewPool()    NewRidePgRepo()  NewRequestRide()  Ride{}
//        ‚Üì               ‚Üì              ‚Üì
//   RabbitMQ      AMQP Consumer   HandleDriverResponse
//        ‚Üì               ‚Üì
//   WebSocket     WS Handler
//
// üìö –°–õ–û–ò (—Å–æ–∑–¥–∞—é—Ç—Å—è –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ):
// 1. –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê: PostgreSQL, RabbitMQ, JWT
// 2. REPOSITORIES: –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è –ë–î
// 3. USE CASES: –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
// 4. ADAPTERS: HTTP, WebSocket, AMQP
// 5. SERVER: –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
//
// ============================================================================

package bootstrap

import (
	"context"
	"fmt"
	"net/http"
	"time"

	inamqp "ridehail/internal/ride/adapter/in/in_amqp"
	"ridehail/internal/ride/adapter/in/in_ws"
	"ridehail/internal/ride/adapter/in/transport"
	"ridehail/internal/ride/adapter/out/out_amqp"
	"ridehail/internal/ride/adapter/out/out_ws"
	"ridehail/internal/ride/adapter/out/repo"
	"ridehail/internal/ride/application/usecase"
	"ridehail/internal/shared/auth"
	"ridehail/internal/shared/config"
	db_conn "ridehail/internal/shared/db"
	"ridehail/internal/shared/logger"
	"ridehail/internal/shared/mq"
	"ridehail/internal/shared/user"
)

// ============================================================================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê RIDE SERVICE
// ============================================================================
//
// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç Ride Service —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
//
// –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢ –í–ù–£–¢–†–ò:
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ë–î, RabbitMQ)
// 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö Use Cases
// 3. –ó–∞–ø—É—Å–∫ AMQP consumers (–≤ —Ñ–æ–Ω–µ)
// 4. –ó–∞–ø—É—Å–∫ WebSocket hub (–≤ —Ñ–æ–Ω–µ)
// 5. –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
func Run(ctx context.Context, cfg config.Config, log *logger.Logger) {
	log.Info(logger.Entry{Action: "ride_service_starting", Message: "initializing ride service"})

	// ========================================================================
	// –°–õ–û–ô 1: –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê
	// ========================================================================
	// –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ–º "–Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ" –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –ë–î, –æ—á–µ—Ä–µ–¥–∏, JWT.
	// –û–Ω–∏ –Ω–µ –∑–Ω–∞—é—Ç –æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

	// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL + PostGIS
	// –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º pgxpool –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏.
	dbPool, err := db_conn.NewPool(ctx, cfg.Database, log)
	if err != nil {
		log.Fatal(logger.Entry{
			Action:  "db_connection_failed",
			Message: err.Error(),
			Error:   &logger.ErrObj{Msg: err.Error()},
		})
	}
	defer db_conn.Close(dbPool, log)

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –∏–Ω–¥–µ–∫—Å—ã, extensions)
	if err := db_conn.Migrate(ctx, dbPool, log); err != nil {
		log.Fatal(logger.Entry{
			Action:  "db_migration_failed",
			Message: err.Error(),
			Error:   &logger.ErrObj{Msg: err.Error()},
		})
	}

	// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RabbitMQ
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—Ä–æ–∫–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.
	mqConn, err := mq.NewRabbitMQ(ctx, cfg.RabbitMQ, log)
	if err != nil {
		log.Fatal(logger.Entry{
			Action:  "rabbitmq_connection_failed",
			Message: err.Error(),
			Error:   &logger.ErrObj{Msg: err.Error()},
		})
	}
	defer mqConn.Close()

	// –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–æ–ª–æ–≥–∏—é RabbitMQ (exchanges, queues, bindings)
	// –≠—Ç–æ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ "–ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤" –∏ "–º–∞—Ä—à—Ä—É—Ç–æ–≤" –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π.
	if err := mq.SetupTopology(ctx, mqConn, log); err != nil {
		log.Fatal(logger.Entry{
			Action:  "rabbitmq_topology_setup_failed",
			Message: err.Error(),
			Error:   &logger.ErrObj{Msg: err.Error()},
		})
	}

	// 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JWT Service
	// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
	jwtService := auth.NewJWTService(cfg.JWT)

	// ========================================================================
	// –°–õ–û–ô 2: WEBSOCKET HUB (–¥–ª—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
	// ========================================================================
	// WebSocket –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	// (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!", "–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª –Ω–∞ –º–µ—Å—Ç–æ").

	// –°–æ–∑–¥–∞–µ–º WebSocket handler –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
	passengerWS := in_ws.NewPassengerWSHandler(jwtService, log)
	wsHub := passengerWS.GetHub()

	// –ó–∞–ø—É—Å–∫–∞–µ–º Hub –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	// Hub —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ,
	// —É–¥–∞–ª—è–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
	go wsHub.Run(ctx)

	// ========================================================================
	// –°–õ–û–ô 3: REPOSITORIES (–ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î)
	// ========================================================================
	// Repositories ‚Äî —ç—Ç–æ "–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏" –º–µ–∂–¥—É –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π –∏ –ë–î.
	// –û–Ω–∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤ Use Cases.

	rideRepo := repo.NewRidePgRepository(dbPool, log)        // CRUD –¥–ª—è rides
	coordRepo := repo.NewCoordinatePgRepository(dbPool, log) // CRUD –¥–ª—è coordinates
	userRepo := user.NewPgRepository(dbPool, log)            // CRUD –¥–ª—è users

	// ========================================================================
	// –°–õ–û–ô 4: PUBLISHERS / NOTIFIERS (–ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
	// ========================================================================
	// –≠—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ–±—ã—Ç–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Ä—É–∂—É:
	// - eventPublisher ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ RabbitMQ
	// - rideNotifier ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket

	eventPublisher := out_amqp.NewRideEventPublisher(mqConn, log) // Publish –≤ RabbitMQ
	rideNotifier := out_ws.NewWsRideNotifier(wsHub, log)          // Send —á–µ—Ä–µ–∑ WebSocket

	// ========================================================================
	// –°–õ–û–ô 5: USE CASES (–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
	// ========================================================================
	// Use Cases ‚Äî —ç—Ç–æ "–º–æ–∑–≥" –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω—ã –≤—Å–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞.
	// –û–Ω–∏ –ù–ï –∑–Ω–∞—é—Ç –æ –¥–µ—Ç–∞–ª—è—Ö –ë–î, HTTP –∏–ª–∏ RabbitMQ ‚Äî —Ç–æ–ª—å–∫–æ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö.

	// Use Case 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º
	requestRideUC := usecase.NewRequestRideService(
		rideRepo,       // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ –≤ –ë–î
		coordRepo,      // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
		eventPublisher, // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è "ride_requested" –≤–æ–¥–∏—Ç–µ–ª—è–º
		rideNotifier,   // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		log,
	)

	// Use Case 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–ø—Ä–∏–Ω—è–ª/–æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–µ–∑–¥–∫—É)
	handleDriverResponseUC := usecase.NewHandleDriverResponseService(
		rideRepo, // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è)
		log,
	)

	// ========================================================================
	// –°–õ–û–ô 6: CONSUMERS (–í—Ö–æ–¥—è—â–∏–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è RabbitMQ)
	// ========================================================================
	// Consumers "—Å–ª—É—à–∞—é—Ç" –æ—á–µ—Ä–µ–¥–∏ RabbitMQ –∏ –≤—ã–∑—ã–≤–∞—é—Ç Use Cases.

	// Consumer 1: –ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π
	// –ú–∞—Ä—à—Ä—É—Ç: Driver App ‚Üí Driver Service ‚Üí RabbitMQ ‚Üí Location Consumer ‚Üí WebSocket Hub ‚Üí Passenger App
	locationConsumer := inamqp.NewLocationConsumer(mqConn, passengerWS, log)
	go func() {
		if err := locationConsumer.Start(ctx); err != nil {
			log.Error(logger.Entry{
				Action:  "location_consumer_failed",
				Message: err.Error(),
				Error:   &logger.ErrObj{Msg: err.Error()},
			})
		}
	}()

	// Consumer 2: –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π (accept/reject)
	// –ú–∞—Ä—à—Ä—É—Ç: Driver App ‚Üí Driver Service ‚Üí RabbitMQ ‚Üí Driver Response Consumer ‚Üí Use Case ‚Üí PostgreSQL
	driverResponseConsumer := inamqp.NewDriverResponseConsumer(mqConn, handleDriverResponseUC, passengerWS, log)
	go func() {
		if err := driverResponseConsumer.Start(ctx); err != nil {
			log.Error(logger.Entry{
				Action:  "driver_response_consumer_failed",
				Message: err.Error(),
				Error:   &logger.ErrObj{Msg: err.Error()},
			})
		}
	}()

	// ========================================================================
	// –°–õ–û–ô 7: HTTP HANDLER (–í—Ö–æ–¥—è—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è REST API)
	// ========================================================================
	// HTTP handler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç REST –∑–∞–ø—Ä–æ—Å—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç Use Cases.

	httpHandler := transport.NewHTTPHandler(requestRideUC, log)

	// ========================================================================
	// –°–õ–û–ô 8: HTTP –°–ï–†–í–ï–† (–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫)
	// ========================================================================

	mux := http.NewServeMux()

	// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞ + –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
	// –ë–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ –ø—Ä–æ–π–¥—É—Ç –¥–∞–ª—å—à–µ.
	authMiddleware := transport.JWTMiddleware(jwtService, userRepo, log)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã REST API
	// POST /api/v1/rides/request ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É
	httpHandler.RegisterRoutes(mux, authMiddleware)

	// WebSocket endpoint –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
	// –ü–∞—Å—Å–∞–∂–∏—Ä—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è —Å—é–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	mux.HandleFunc("/ws", passengerWS.ServeWS)

	// HTTP —Å–µ—Ä–≤–µ—Ä
	addr := fmt.Sprintf(":%d", cfg.Services.RideServicePort)
	server := &http.Server{
		Addr:              addr,
		Handler:           mux,
		ReadTimeout:       15 * time.Second,
		WriteTimeout:      15 * time.Second,
		IdleTimeout:       60 * time.Second,
		ReadHeaderTimeout: 5 * time.Second,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Info(logger.Entry{
			Action:  "http_server_starting",
			Message: fmt.Sprintf("listening on %s", addr),
		})
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal(logger.Entry{
				Action:  "http_server_failed",
				Message: err.Error(),
				Error:   &logger.ErrObj{Msg: err.Error()},
			})
		}
	}()

	// –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	<-ctx.Done()
	log.Info(logger.Entry{Action: "ride_service_stopping", Message: "shutting down ride service"})

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É HTTP —Å–µ—Ä–≤–µ—Ä–∞
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	if err := server.Shutdown(shutdownCtx); err != nil {
		log.Error(logger.Entry{
			Action:  "http_server_shutdown_failed",
			Message: err.Error(),
			Error:   &logger.ErrObj{Msg: err.Error()},
		})
	} else {
		log.Info(logger.Entry{Action: "http_server_stopped", Message: "http server stopped gracefully"})
	}

	log.Info(logger.Entry{Action: "ride_service_stopped", Message: "ride service stopped"})
}
