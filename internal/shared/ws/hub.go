// ============================================================================
// WEBSOCKET HUB - –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
// ============================================================================
//
// üì° –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
// WebSocket Hub ‚Äî —ç—Ç–æ "—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è" –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏.
// –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É —Ç–∞–∫—Å–∏: –æ–Ω–∞ –∑–Ω–∞–µ—Ç –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏
// –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω, –∏ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º —Å–æ–æ–±—â–µ–Ω–∏—è.
//
// üéØ –û–°–ù–û–í–ù–´–ï –ó–ê–î–ê–ß–ò:
// 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è)
// 2. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∫–æ–≥–¥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç—Å—è)
// 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ userID)
// 4. Broadcast —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
// 5. –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º (ping/pong)
//
// üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
// - –ö–ª–∏–µ–Ω—Ç –î–û–õ–ñ–ï–ù –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω
// - –ë–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
//
// üí° –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
//
//   // –°–æ–∑–¥–∞–µ–º Hub
//   hub := ws.NewHub(authFunc, logger)
//   hub.SetMessageHandler(myMessageHandler)
//   go hub.Run(ctx)
//
//   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—É —Å ID = "uuid-123"
//   hub.SendToUser("uuid-123", map[string]interface{}{
//     "type": "ride_matched",
//     "driver_id": "driver-456",
//   })
//
// üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
//
//   –ü–∞—Å—Å–∞–∂–∏—Ä (–±—Ä–∞—É–∑–µ—Ä/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
//        ‚îÇ
//        ‚îÇ WebSocket handshake
//        ‚ñº
//   HTTP Handler (ServeWS)
//        ‚îÇ
//        ‚îú‚îÄ‚ñ∫ Upgrade HTTP ‚Üí WebSocket
//        ‚îú‚îÄ‚ñ∫ –°–æ–∑–¥–∞—Ç—å Client{...}
//        ‚îî‚îÄ‚ñ∫ hub.register ‚Üê Client
//                ‚îÇ
//                ‚ñº
//           Hub.Run() [goroutine]
//                ‚îÇ
//                ‚îú‚îÄ‚ñ∫ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ map
//                ‚îú‚îÄ‚ñ∫ –ó–∞–ø—É—Å–∫–∞–µ—Ç client.readPump()
//                ‚îî‚îÄ‚ñ∫ –ó–∞–ø—É—Å–∫–∞–µ—Ç client.writePump()
//
//   –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
//        hub.SendToUser(userID, msg)
//             ‚îÇ
//             ‚îú‚îÄ‚ñ∫ –ò—â–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ userID
//             ‚îî‚îÄ‚ñ∫ client.send ‚Üê JSON(msg)
//                     ‚îÇ
//                     ‚ñº
//                client.writePump() –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ WebSocket
//
// ============================================================================

package ws

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"sync"
	"time"

	"ridehail/internal/shared/logger"

	"github.com/gorilla/websocket"
)

// ============================================================================
// –ö–û–ù–°–¢–ê–ù–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// ============================================================================

const (
	// authTimeout ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	// –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç –î–û–õ–ñ–ï–ù –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥,
	// –∏–Ω–∞—á–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.
	authTimeout = 5 * time.Second

	// pingInterval ‚Äî –∫–∞–∫ —á–∞—Å—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –∫–ª–∏–µ–Ω—Ç—É
	// –≠—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ–µ.
	pingInterval = 30 * time.Second

	// pongWait ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è pong –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	// –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 60 —Å–µ–∫—É–Ω–¥, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–µ—Ä—Ç–≤—ã–º.
	pongWait = 60 * time.Second

	// maxMessageSize ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (8 KB)
	// –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
	maxMessageSize = 8192

	// writeWait ‚Äî —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞ 10 —Å–µ–∫—É–Ω–¥, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç—Å—è.
	writeWait = 10 * time.Second
)

// ============================================================================
// WEBSOCKET UPGRADER
// ============================================================================
// upgrader –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å –≤ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

var upgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin: func(r *http.Request) bool {
		// ‚ö†Ô∏è –í PRODUCTION –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ origin!
		// –ü—Ä–∏–º–µ—Ä: return r.Header.Get("Origin") == "https://myapp.com"
		// –°–µ–π—á–∞—Å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ origins (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!)
		return true
	},
}

// ============================================================================
// –¢–ò–ü–´ –§–£–ù–ö–¶–ò–ô
// ============================================================================

// AuthFunc ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: —Å—Ç—Ä–æ–∫—É —Ç–æ–∫–µ–Ω–∞
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: userID, role, error
//
// –ü–†–ò–ú–ï–†:
//
//	func myAuthFunc(token string) (string, string, error) {
//	  claims, err := jwt.Parse(token)
//	  if err != nil { return "", "", err }
//	  return claims.UserID, claims.Role, nil
//	}
type AuthFunc func(token string) (userID, role string, err error)

// MessageHandler ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—É.
//
// –ü–ê–†–ê–ú–ï–¢–†–´:
// - client: –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
// - messageType: —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "ping", "chat_message")
// - data: JSON –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
//
// –ü–†–ò–ú–ï–†:
//
//	func myHandler(client *Client, msgType string, data json.RawMessage) error {
//	  switch msgType {
//	  case "ping":
//	    client.Send(map[string]string{"type": "pong"})
//	  }
//	  return nil
//	}
type MessageHandler func(client *Client, messageType string, data json.RawMessage) error

// ============================================================================
// CLIENT - –û–¥–Ω–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
// ============================================================================

// Client –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.
//
// –ü–û–õ–Ø:
// - ID: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (UUID)
// - UserID: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
// - Role: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("passenger", "driver", "admin")
// - conn: –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
// - send: –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É
// - hub: —Å—Å—ã–ª–∫–∞ –Ω–∞ Hub –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
// - log: logger –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π
type Client struct {
	ID     string          // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	UserID string          // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ JWT)
	Role   string          // –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	conn   *websocket.Conn // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	send   chan []byte     // –ö–∞–Ω–∞–ª –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	hub    *Hub            // –°—Å—ã–ª–∫–∞ –Ω–∞ Hub
	log    *logger.Logger  // Logger
}

// ============================================================================
// HUB - –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
// ============================================================================

// Hub —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏.
//
// –í–ù–£–¢–†–ï–ù–ù–Ø–Ø –°–¢–†–£–ö–¢–£–†–ê:
// - clients: map[clientID]*Client ‚Äî –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
// - mu: –º—å—é—Ç–µ–∫—Å –¥–ª—è thread-safe –¥–æ—Å—Ç—É–ø–∞ –∫ clients
// - register: –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
// - unregister: –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
// - broadcast: –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º
// - authFunc: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
// - messageHandler: —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
//
// –†–ê–ë–û–¢–ê –° –ö–õ–ò–ï–ù–¢–ê–ú–ò:
//
//	hub.clients["client-123"] = &Client{...}
//
// –ü–û–¢–û–ö–û–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
// –í–µ—Å—å –¥–æ—Å—Ç—É–ø –∫ hub.clients –∑–∞—â–∏—â–µ–Ω –º—å—é—Ç–µ–∫—Å–æ–º (mu.Lock/Unlock)
type Hub struct {
	clients        map[string]*Client // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
	mu             sync.RWMutex       // –ó–∞—â–∏—Ç–∞ –æ—Ç concurrent access
	register       chan *Client       // –ö–∞–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	unregister     chan *Client       // –ö–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
	broadcast      chan []byte        // –ö–∞–Ω–∞–ª broadcast —Å–æ–æ–±—â–µ–Ω–∏–π
	authFunc       AuthFunc           // –§—É–Ω–∫—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	messageHandler MessageHandler     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	log            *logger.Logger     // Logger
}

// ============================================================================
// –ö–û–ù–°–¢–†–£–ö–¢–û–† HUB
// ============================================================================

// NewHub —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π WebSocket Hub.
//
// –ü–ê–†–ê–ú–ï–¢–†–´:
// - authFunc: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤
// - log: logger –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π
//
// –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Hub –ù–ï –∑–∞–±—É–¥—å—Ç–µ:
// 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MessageHandler (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
// 2. –ó–∞–ø—É—Å—Ç–∏—Ç—å hub.Run(ctx) –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
//
// –ü–†–ò–ú–ï–†:
//
//	hub := ws.NewHub(myAuthFunc, logger)
//	hub.SetMessageHandler(myHandler)
//	go hub.Run(ctx)
func NewHub(authFunc AuthFunc, log *logger.Logger) *Hub {
	return &Hub{
		clients:    make(map[string]*Client),
		register:   make(chan *Client, 10), // –ë—É—Ñ–µ—Ä –Ω–∞ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤
		unregister: make(chan *Client, 10), // –ë—É—Ñ–µ—Ä –Ω–∞ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤
		broadcast:  make(chan []byte, 256), // –ë—É—Ñ–µ—Ä –Ω–∞ 256 —Å–æ–æ–±—â–µ–Ω–∏–π
		authFunc:   authFunc,
		log:        log,
	}
}

// ============================================================================
// –£–°–¢–ê–ù–û–í–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
// ============================================================================

// SetMessageHandler —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.
//
// –ö–û–ì–î–ê –í–´–ó–´–í–ê–ï–¢–°–Ø:
// –ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—É, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è handler.
//
// –ü–†–ò–ú–ï–†:
//
//	hub.SetMessageHandler(func(client *Client, msgType string, data json.RawMessage) error {
//	  log.Info("Received message", msgType, "from", client.UserID)
//	  return nil
//	})
func (h *Hub) SetMessageHandler(handler MessageHandler) {
	h.messageHandler = handler
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ö–∞–±–∞
func (h *Hub) Run(ctx context.Context) {
	for {
		select {
		case <-ctx.Done():
			h.log.Info(logger.Entry{Action: "hub_stopped", Message: "websocket hub stopped"})
			return

		case client := <-h.register:
			h.mu.Lock()
			h.clients[client.ID] = client
			h.mu.Unlock()
			h.log.Info(logger.Entry{
				Action:  "client_registered",
				Message: client.ID,
				Additional: map[string]any{
					"user_id": client.UserID,
					"role":    client.Role,
				},
			})

		case client := <-h.unregister:
			h.mu.Lock()
			if _, ok := h.clients[client.ID]; ok {
				delete(h.clients, client.ID)
				close(client.send)
			}
			h.mu.Unlock()
			h.log.Info(logger.Entry{
				Action:  "client_unregistered",
				Message: client.ID,
			})

		case message := <-h.broadcast:
			h.mu.RLock()
			for _, client := range h.clients {
				select {
				case client.send <- message:
				default:
					// –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
					close(client.send)
					delete(h.clients, client.ID)
				}
			}
			h.mu.RUnlock()
		}
	}
}

// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
func (h *Hub) Broadcast(message []byte) {
	select {
	case h.broadcast <- message:
	default:
		h.log.Error(logger.Entry{
			Action:  "broadcast_dropped",
			Message: "broadcast channel full",
		})
	}
}

// SendToUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (h *Hub) SendToUser(userID string, message []byte) {
	h.mu.RLock()
	defer h.mu.RUnlock()

	for _, client := range h.clients {
		if client.UserID == userID {
			select {
			case client.send <- message:
			default:
				h.log.Error(logger.Entry{
					Action:  "send_to_user_failed",
					Message: userID,
				})
			}
		}
	}
}

// SendToRole –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
func (h *Hub) SendToRole(role string, message []byte) {
	h.mu.RLock()
	defer h.mu.RUnlock()

	for _, client := range h.clients {
		if client.Role == role {
			select {
			case client.send <- message:
			default:
				h.log.Error(logger.Entry{
					Action:  "send_to_role_failed",
					Message: role,
					Additional: map[string]any{
						"client_id": client.ID,
					},
				})
			}
		}
	}
}

// GetClientsByRole –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
func (h *Hub) GetClientsByRole(role string) []string {
	h.mu.RLock()
	defer h.mu.RUnlock()

	var userIDs []string
	for _, client := range h.clients {
		if client.Role == role {
			userIDs = append(userIDs, client.UserID)
		}
	}
	return userIDs
}

// GetClient –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ user_id
func (h *Hub) GetClient(userID string) *Client {
	h.mu.RLock()
	defer h.mu.RUnlock()

	for _, client := range h.clients {
		if client.UserID == userID {
			return client
		}
	}
	return nil
}

// IsUserConnected –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
func (h *Hub) IsUserConnected(userID string) bool {
	return h.GetClient(userID) != nil
}

// ServeWS –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –Ω–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (h *Hub) ServeWS(w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		h.log.Error(logger.Entry{
			Action:  "ws_upgrade_failed",
			Message: err.Error(),
			Error:   &logger.ErrObj{Msg: err.Error()},
		})
		return
	}

	clientID := fmt.Sprintf("ws_%d", time.Now().UnixNano())

	client := &Client{
		ID:   clientID,
		conn: conn,
		send: make(chan []byte, 256),
		hub:  h,
		log:  h.log,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	authDeadline := time.Now().Add(authTimeout)
	_ = conn.SetReadDeadline(authDeadline)

	// –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å JWT —Ç–æ–∫–µ–Ω–æ–º
	var authMsg struct {
		Token string `json:"token"`
	}

	if err := conn.ReadJSON(&authMsg); err != nil {
		_ = conn.WriteMessage(websocket.CloseMessage,
			websocket.FormatCloseMessage(websocket.CloseProtocolError, "auth timeout"))
		_ = conn.Close()
		h.log.Error(logger.Entry{
			Action:  "ws_auth_failed",
			Message: "no auth message received",
		})
		return
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	userID, role, err := h.authFunc(authMsg.Token)
	if err != nil {
		_ = conn.WriteJSON(map[string]string{"error": "invalid token"})
		_ = conn.Close()
		h.log.Error(logger.Entry{
			Action:  "ws_auth_invalid_token",
			Message: err.Error(),
			Error:   &logger.ErrObj{Msg: err.Error()},
		})
		return
	}

	client.UserID = userID
	client.Role = role

	// –°–Ω–∏–º–∞–µ–º –¥–µ–¥–ª–∞–π–Ω, —Å—Ç–∞–≤–∏–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π pong wait
	_ = conn.SetReadDeadline(time.Now().Add(pongWait))
	conn.SetPongHandler(func(string) error {
		_ = conn.SetReadDeadline(time.Now().Add(pongWait))
		return nil
	})

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	h.register <- client

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	_ = conn.WriteJSON(map[string]string{"status": "authenticated", "user_id": userID})

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
	go client.writePump()
	go client.readPump()
}

// readPump —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
func (c *Client) readPump() {
	defer func() {
		c.hub.unregister <- c
		_ = c.conn.Close()
	}()

	c.conn.SetReadLimit(maxMessageSize)
	_ = c.conn.SetReadDeadline(time.Now().Add(pongWait))

	for {
		_, message, err := c.conn.ReadMessage()
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				c.log.Error(logger.Entry{
					Action:  "ws_read_error",
					Message: c.ID,
					Error:   &logger.ErrObj{Msg: err.Error()},
				})
			}
			break
		}

		// –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		var msg struct {
			Type string          `json:"type"`
			Data json.RawMessage `json:"data,omitempty"`
		}

		if err := json.Unmarshal(message, &msg); err != nil {
			c.log.Error(logger.Entry{
				Action:  "ws_parse_message_error",
				Message: err.Error(),
				Error:   &logger.ErrObj{Msg: err.Error()},
				Additional: map[string]any{
					"client_id": c.ID,
					"raw":       string(message),
				},
			})
			continue
		}

		// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		if c.hub.messageHandler != nil {
			if err := c.hub.messageHandler(c, msg.Type, msg.Data); err != nil {
				c.log.Error(logger.Entry{
					Action:  "ws_handle_message_error",
					Message: err.Error(),
					Error:   &logger.ErrObj{Msg: err.Error()},
					Additional: map[string]any{
						"client_id": c.ID,
						"msg_type":  msg.Type,
					},
				})
			}
		}
	}
}

// writePump –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
func (c *Client) writePump() {
	ticker := time.NewTicker(pingInterval)
	defer func() {
		ticker.Stop()
		_ = c.conn.Close()
	}()

	for {
		select {
		case message, ok := <-c.send:
			_ = c.conn.SetWriteDeadline(time.Now().Add(writeWait))
			if !ok {
				// Hub –∑–∞–∫—Ä—ã–ª –∫–∞–Ω–∞–ª
				_ = c.conn.WriteMessage(websocket.CloseMessage, []byte{})
				return
			}

			if err := c.conn.WriteMessage(websocket.TextMessage, message); err != nil {
				return
			}

		case <-ticker.C:
			_ = c.conn.SetWriteDeadline(time.Now().Add(writeWait))
			if err := c.conn.WriteMessage(websocket.PingMessage, nil); err != nil {
				return
			}
		}
	}
}

// BroadcastJSON –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
func (h *Hub) BroadcastJSON(data interface{}) error {
	msg, err := json.Marshal(data)
	if err != nil {
		return err
	}
	h.Broadcast(msg)
	return nil
}

// SendToUserJSON –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (h *Hub) SendToUserJSON(userID string, data interface{}) error {
	msg, err := json.Marshal(data)
	if err != nil {
		return err
	}
	h.SendToUser(userID, msg)
	return nil
}

// SendToRoleJSON –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—å—é
func (h *Hub) SendToRoleJSON(role string, data interface{}) error {
	msg, err := json.Marshal(data)
	if err != nil {
		return err
	}
	h.SendToRole(role, msg)
	return nil
}

// SendTypedMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–ø–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (h *Hub) SendTypedMessage(userID, msgType string, data interface{}) error {
	message := map[string]interface{}{
		"type": msgType,
		"data": data,
	}
	return h.SendToUserJSON(userID, message)
}
